version: 0.2

env:
  git-credential-helper: yes
  variables:
    # SERVICE_NAME should match the ECS service name without the project or environment
    # Example: ECS Service name: dvp-staging-saml-proxy = SERVICE_NAME: "saml-proxy"
    SERVICE_NAME: "envvars"
    # REPOSITORY should be the ECR Repository where the container is stored
    REPOSITORY: "envvars"
    # FRIENDLY_NAME should be the name used in Parameter store, e.g.: /dvp/environment/friendly-name
    FRIENDLY_NAME: "envvars"
  parameter-store:
    GITHUB_TOKEN: "/github_token"
phases:
  pre_build:
    commands:
    - echo Logging into ECR
    - $(aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION})
    - echo Getting latest tag...
    # To get the latest release version, we will increment the last version number found in Github
    - |
      if [ -n "$DEPLOY_TAG" ]; then
        echo Found DEPLOY_TAG in job variables: "$DEPLOY_TAG".
      else
        DEPLOY_TAG=$(hub tag|sort --version-sort |tail -1); export DEPLOY_TAG
        echo Got latest tag from Github: "$DEPLOY_TAG"
      fi
    - echo Getting latest config...
    - git clone https://github.com/duganth-va/pyprint_env-config
    - cd pyprint_env-config;
    - | 
      if [ -n "$CONFIG_TAG" ]; then
        git checkout "$CONFIG_TAG"
      else
        CONFIG_TAG=$(hub tag|sort --version-sort |tail -1); export CONFIG_TAG
    - cd ..
  build:
    commands:
    - echo Triggering deploys...
    - SERVICE="td-envvars-service"
    - CLUSTER="td-envvars-cluster"
    - CONTAINER="td-envvars-envvars"
    - |
      if ecs deploy --no-deregister \
        -t "$DEPLOY_TAG" \
        -e "${CONTAINER}" APP_VER "'${DEPLOY_TAG}'" \
        -e "${CONTAINER}" CONFIG_VER "'${CONFIG_TAG}'" \
        --timeout 1200 "${CLUSTER}" "${SERVICE}" \
        | tee "$CODEBUILD_SRC_DIR"/deploy_output.txt; then
        echo pass
      else
        PROJECT=$(echo "${CODEBUILD_BUILD_ID}"|awk -F":" '{print $1}')
        BUILD=$(echo "${CODEBUILD_BUILD_ID}"|awk -F":" '{print $2}')
        echo fail
      fi
  post_build:
    commands:
